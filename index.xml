<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>博客介绍 on icestormspirit的博客</title>
    <link>https://StormSpirit22.github.io/</link>
    <description>Recent content in 博客介绍 on icestormspirit的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 22 May 2021 17:22:00 +0800</lastBuildDate><atom:link href="https://StormSpirit22.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>二叉树遍历</title>
      <link>https://StormSpirit22.github.io/docs/leetcode/%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91%E9%81%8D%E5%8E%86/</link>
      <pubDate>Tue, 27 Apr 2021 22:12:00 +0800</pubDate>
      
      <guid>https://StormSpirit22.github.io/docs/leetcode/%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91%E9%81%8D%E5%8E%86/</guid>
      <description>二叉树遍历 #   对于普通的二叉树遍历大家肯定都觉得这不是很简单吗，递归就解决了，但是对于基础还是要巩固一下。 前序遍历顺序：root节点，left节点，right节点。
中序遍历顺序：left节点，root节点，right节点。
后序遍历顺序：left节点，right节点，root节点。
可以看出前中后序其实就是root节点在哪个位置的遍历顺序。
另外还有层次遍历： 根据二叉树每一层的顺序来遍历。
 二叉树前序遍历 #   递归代码：
func preorderRecursive(root *TreeNode) []int { var res []int if root == nil { res = append(res, root.Val) res = append(res, preorderRecursive(root.Left)...) res = append(res, preorderRecursive(root.Right)...) } return res }  是不是很简单？但是非递归的代码能一口气写出来吗？非递归遍历需要借助栈来实现： func preorderTraversal(root *TreeNode) []int { if root == nil { return nil } var result []int var stack []*TreeNode for root != nil || len(stack) &amp;gt; 0 { for root !</description>
    </item>
    
    <item>
      <title>二叉树简单题</title>
      <link>https://StormSpirit22.github.io/docs/leetcode/%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%AE%80%E5%8D%95%E9%A2%98/</link>
      <pubDate>Sat, 22 May 2021 15:18:39 +0800</pubDate>
      
      <guid>https://StormSpirit22.github.io/docs/leetcode/%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%AE%80%E5%8D%95%E9%A2%98/</guid>
      <description>二叉树简单题 #   上一篇文章里已经介绍了各种二叉树的遍历方式，可以看到对于二叉树来说，递归是最简洁并且好理解的遍历方式，所以对于二叉树的题，我们首先要想能不能用递归解决。而对于递归，我们不需要去考虑这个函数是否能实现我们要的功能，而是要相信函数一定能实现我们的功能，然后定义base case即可。学以致用，现在先来看看leetcode上二叉树的简单题，练练手。下面会先介绍这些题目的思路，ac代码集中放到最后。建议读者先自己去做一下想一想，然后手写代码，如果直接先看代码，没有经过自己的思考，第二次碰到可能还是不会做。
下面选取了一些题目，虽然是easy难度，但是如果是第一次做也是不容易能马上写出来的，所以还是要多刷题！^_^
 本文要介绍的题目有：
 二叉树的最大深度
 对称的二叉树
 二叉树的镜像
 二叉树的最近公共祖先
 平衡二叉树
下面我们一个个来分析。
 题目解析 #  二叉树的最大深度 #   输入一棵二叉树的根节点，求该树的深度。从根节点到叶节点依次经过的节点（含根、叶节点）形成树的一条路径，最长路径的长度为树的深度。
 解析：
 这题比较简单，直接递归 max(left, right) + 1即可。
 对称的二叉树 #   请实现一个函数，用来判断一棵二叉树是不是对称的。如果一棵二叉树和它的镜像一样，那么它是对称的。
 解析：
 要判断是不是对称二叉树，并不是简单地递归去判断左右子树的值是否相等，比如第一个例子，到第二层的时候就不是判断左右子树的值相等了，而是需要判断 left.left.val == right.right.val 和 left.right.val == right.left.val。那这怎么做呢？我们可以用一个辅助函数，参数值是 left, right， 每次只要判断 left.val 是否等于 right.val ，然后再将 left.left 和 right.right， left.right 和 right.left 递归就好了。
 二叉树的镜像 #   请完成一个函数，输入一个二叉树，该函数输出它的镜像。</description>
    </item>
    
    <item>
      <title>二叉树中等题</title>
      <link>https://StormSpirit22.github.io/docs/leetcode/%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B8%AD%E7%AD%89%E9%A2%98/</link>
      <pubDate>Sun, 16 May 2021 21:23:00 +0800</pubDate>
      
      <guid>https://StormSpirit22.github.io/docs/leetcode/%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B8%AD%E7%AD%89%E9%A2%98/</guid>
      <description>二叉树中等题 #  上次已经做完了二叉树的简单题，这次来看看难度为中等的题。首先有一个点需要讲清楚，就是二叉树的解法基本都是通过遍历，那么如何判断我们应该用前序还是中序还是后序遍历的框架？根据题意，思考一个二叉树节点需要做什么，到底用什么遍历顺序就清楚了。先看题，最好先点到题目里做一遍。
本文要介绍的题目有：
 二叉树展开为链表
 填充每个节点的下一个右侧节点指针
 最大二叉树
 从前序与中序遍历序列构造二叉树
 从中序与后序遍历序列构造二叉树
 寻找重复的子树
下面我们一个个来分析。
 题目解析 #  二叉树展开为链表 #   给你二叉树的根结点 root ，请你将它展开为一个单链表：
展开后的单链表应该同样使用 TreeNode ，其中 right 子指针指向链表中下一个结点，而左子指针始终为 null 。 展开后的单链表应该与二叉树 先序遍历 顺序相同。
 解析：
 想象一个最简单的情况，对于一个root节点来说，假设它的左右子树都只有一个节点，那么把树展开为链表，应该是先把root.Right保存下来，然后root.Right = root.Left，最后遍历新的右子树到它的最右节点，然后把之前的右子树接上去，这一块逻辑应该比较清晰。
 然后就是递归处理这一块代码就行了，有个问题就是这题用前序遍历还是后序呢？其实这两种都可以通过，区别在于需要的时间和空间不同，可以想象一下，如果是前序遍历，先将整个左子树拼接到右边，再去遍历整个右子树，整个右子树会拉得特别长，再一个个递归下去，这耗费的时间和空间就特别多了。而如果使用后序遍历，先遍历左右子树，分别把左右子树处理完成后，最后处理root节点，这样使用的时间和空间会少很多。即前序遍历是自顶向下的方法，而后序遍历是自底向上的方法，再通俗一点地说，对于这道题，使用后序遍历是使用归并的思想，先处理小的情况，最后把两边处理好的子树统一拼接起来，这样效率上会快很多。这个思路是递归的解法，迭代的解法可以去看官方解答。
 填充每个节点的下一个右侧节点指针 #   给定一个 完美二叉树 ，其所有叶子节点都在同一层，每个父节点都有两个子节点。填充它的每个 next 指针，让这个指针指向其下一个右侧节点。如果找不到下一个右侧节点，则将 next 指针设置为 NULL。
初始状态下，所有 next 指针都被设置为 NULL。
 解析：
 这题同样也是想象一个最简单的情况，假设有这样一个前序遍历的二叉树，[1, 2, 3]，是不是非常简单，只需要把2节点的next指针指向3，即 left.</description>
    </item>
    
    <item>
      <title>二叉树复杂题</title>
      <link>https://StormSpirit22.github.io/docs/leetcode/%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%A4%8D%E6%9D%82%E9%A2%98/</link>
      <pubDate>Sat, 29 May 2021 19:19:00 +0800</pubDate>
      
      <guid>https://StormSpirit22.github.io/docs/leetcode/%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%A4%8D%E6%9D%82%E9%A2%98/</guid>
      <description>二叉树复杂题 #  好了，二叉树的简单题、中等题我们都做过了一部分，基本的思路都了解了，这里看一下leetcode上的二叉树的复杂题，放心，只有一题。
本文要介绍的题目有：
 二叉树的序列化与反序列化
下面我们来分析。
 题目解析 #  二叉树的序列化与反序列化 #   序列化是将一个数据结构或者对象转换为连续的比特位的操作，进而可以将转换后的数据存储在一个文件或者内存中，同时也可以通过网络传输到另一个计算机环境，采取相反方式重构得到原数据。
请设计一个算法来实现二叉树的序列化与反序列化。这里不限定你的序列 / 反序列化算法执行逻辑，你只需要保证一个二叉树可以被序列化为一个字符串并且将这个字符串反序列化为原始的树结构。
提示: 输入输出格式与 LeetCode 目前使用的方式一致，详情请参阅 LeetCode 序列化二叉树的格式。你并非必须采取这种方式，你也可以采用其他的方法解决这个问题。
 解析：
这道题更类似于设计题，可以先想想序列化怎么做，序列化我们之前在重复子树中已经做过类似的，这次是把整棵树都序列化，也大同小异。
 先介绍递归的方法，使用前序遍历，我们假定如果节点为nil，则用“#”来代替，节点之间用“,”来分隔。我们需要一个变量data，当root == nil时，data += &amp;ldquo;#&amp;rdquo; + &amp;ldquo;,&amp;quot;，否则 data += root.Val，然后递归root.Left和root.Right，这样序列化就完成了。比如题目中的例子，root = [1,2,3,null,null,4,5]，序列化之后应该返回 “1,2,#,#,3,4,#,#,5,#,# ” 这样才对。
 接着介绍反序列化，同样，我们需要声明一个全局变量nodes，作为strings.Split(data, &amp;ldquo;,&amp;quot;)的接收者，即将每个节点放到数组中，然后拿出数组第一个值，并在数组中去掉这个值，然后以这个值初始化root节点，接着使用nodes去递归赋值root.Left和root.Right即可。后序遍历也是可以的，大家可以自己去试试，但是中序遍历不行，因为中序遍历的序列化无法确定root值是哪个。
 再介绍迭代的方法，也就是层次遍历，层次遍历就是借助队列来实现，序列化比较简单，这里跳过。要注意的是反序列化也需要借助队列，出队一个元素，需要再入队后面两个元素，即left，right。
 代码 #  二叉树的序列化与反序列化（前序遍历） #  type Codec struct { } func Constructor() Codec { c := Codec{} return c } // Serializes a tree to a single string.</description>
    </item>
    
    <item>
      <title>Redis学习（一）</title>
      <link>https://StormSpirit22.github.io/docs/redis/Redis%E5%AD%A6%E4%B9%A0%E4%B8%80/</link>
      <pubDate>Sat, 22 May 2021 17:08:41 +0800</pubDate>
      
      <guid>https://StormSpirit22.github.io/docs/redis/Redis%E5%AD%A6%E4%B9%A0%E4%B8%80/</guid>
      <description>Redis 学习（一） #  redis想必大家都用过，但是一些底层实现的知识点还是需要好好看看，这篇博客就redis的数据结构为核心，总结网上的一些文章，当做学习笔记记录下来。侵删。
一、Redis是什么？ #  Redis是一个开源的，基于内存的数据结构存储，可用作于数据库、缓存、消息中间件。redis的常用命令可以去查阅官网，这里不做介绍。
二、为什么要用Redis #  Redis是基于内存的，用于缓存的一种技术。而且通常是以kv的方式进行存储的，有人就问了，为啥不用数据结构的map呢？map不也差不多？下面是几点原因：
  数据结构的map是本地缓存，如果想用分布式缓存则做不到。多台机器缓存不具有一致性。
  map是基于应用程序的，如果一个map特别大，那么运行起来会非常慢甚至程序会崩溃。而redis作为一个独立的缓存中间件，与应用程序解耦。
  redis是专业做缓存的，不需要程序员去专门进行内存管理，而且可以将缓存数据存储到硬盘里，并且可以恢复，并且提供了多种数据结构及缓存过期等机制。
  三、Redis的数据结构 #  Redis 有 5 种基础数据结构，它们分别是：string(字符串)、list(链表)、hash(哈希表)、set(集合) 和 zset(有序集合)。要说明的是，这些数据结构表示的是redis key-value中“value”的类型，redis的key都是字符串。而redis底层并不是直接使用这些类型，而是构造了一个redisObject的类型。也就是说，我们在redis里创建一个key-value，会至少创建出两个对象，key对象和value对象。redisObject数据结构：
typedef struct redisObject{ // 对象的类型 unsigned type 4:; // 对象的编码格式 unsigned encoding:4; // 指向底层实现数据结构的指针 void * ptr; //..... }robj;  （上面这张图现在看不懂没关系，等下面先介绍了几种数据结构再回过头来看就懂了。）
简单来说就是Redis对key-value封装成对象，key是一个对象，value也是一个对象。每个对象都有type(类型)、encoding(编码)、ptr(指向底层数据结构的指针)来表示。
下面分别就这几种类型的底层实现介绍一下。
1、SDS #  redis是用c写的，但是redis的string并不是c里的string直接拿来用的。redis的string类型是一个叫做**简单动态字符串(Simple dynamic string,SDS)**的数据结构，源码如下：
struct sdshdr{ // 字节数组，用于保存字符串 char buf[]; // 记录buf数组中已使用的字节数量，也是字符串的长度 int len; // 记录buf数组未使用的字节数量 int free; } 可以看到sds的类型如图所示：</description>
    </item>
    
    <item>
      <title></title>
      <link>https://StormSpirit22.github.io/docs/leetcode/%E6%95%B0%E7%BB%84/%E6%95%B0%E7%BB%84/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://StormSpirit22.github.io/docs/leetcode/%E6%95%B0%E7%BB%84/%E6%95%B0%E7%BB%84/</guid>
      <description>数组 #    爱吃香蕉的珂珂：可以先用暴力循环，从1开始到数组最大值逐个遍历，如果需要时间小于h则返回。进一步向想是不是可以用二分法，l=1，r=max(array)+1，如果小于h则记录当时的mid值。  在 D 天内送达包裹的能力：同上，不过l=max(array)，r=sum(array)。  </description>
    </item>
    
  </channel>
</rss>
